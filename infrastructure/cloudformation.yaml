---
Description: Web Image Optimizer
Parameters:
  SecurityToken:
    Type: String

Outputs:
  LambdaUrl:
    Description: The HTTPS endpoint of the lambda function
    Value: !GetAtt LambdaUrl.FunctionUrl

Resources:
  OriginalImagesBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub ${AWS::StackName}-original-images
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true

  ProcessedImagesBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub ${AWS::StackName}-processed-images
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: Housekeeping
            Status: Enabled
            ExpirationInDays: 300

  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName} # note: the /aws/lambda/ is mandatory as logstreams are automatically created by AWS in this LogGroup
      RetentionInDays: 7

  Lambda:
    Type: AWS::Lambda::Function
    DependsOn: LambdaLogGroup
    Properties:
      FunctionName: !Ref AWS::StackName
      Description: Web Image Optimizer
      Runtime: nodejs18.x
      Timeout: 10
      MemorySize: 2048 # the more memory the more CPU power
      Handler: lambda.handler
      Code:
        ZipFile: 'placeholder - do not change'
        # An alternate way to deploy is to upload the lambda zip artifact to an S3 bucket
        # and reference the versioned artificat from the stack. Then set the version you want
        # to deploy and update a stack. Because stack updates always takes several seconds,
        # this is not the fastest way, but the safest way (auditable, rollback to older versions)
        # ---
        # S3Bucket: lambda-artifacts.example.com
        # S3Key: !Sub example/${Version}.zip

      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          NODE_ENV: 'production'
          NODE_OPTIONS: '--enable-source-maps'
          ORIGINAL_BUCKET: !Ref OriginalImagesBucket
          ORIGINAL_KEY_PREFIX: 'image/'
          PROCESSED_BUCKET: !Ref ProcessedImagesBucket
          CACHE_CONTROL: 'public, max-age=31536000'
          IMAGE_PATH: '/image/'
          IMAGE_QUALITY: '80'
          SECURITY_TOKEN: 'secret'

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref Lambda
      FunctionUrlAuthType: NONE
      Action: lambda:InvokeFunctionUrl
      Principal: '*'

  LambdaUrl:
    Type: AWS::Lambda::Url
    Properties:
      AuthType: NONE
      TargetFunctionArn: !Ref Lambda

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ImageAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub arn:aws:s3:::${AWS::StackName}-original-images/*
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::${AWS::StackName}-original-images
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  - !Sub arn:aws:s3:::${AWS::StackName}-processed-images/*
