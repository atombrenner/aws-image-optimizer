---
Description: Image Optimizer
Parameters:
  SecurityToken:
    Type: String
  ViewerRequestFunction:
    Type: String

Outputs:
  LambdaUrl:
    Value: !GetAtt LambdaUrl.FunctionUrl
  CloudFrontDomain:
    Value: !GetAtt CloudFrontDistribution.DomainName

Resources:
  OriginalImagesBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub ${AWS::StackName}-original-images
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true

  OptimizedImagesBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub ${AWS::StackName}-optimized-images
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: Housekeeping
            Status: Enabled
            ExpirationInDays: 300

  OptimizedImagesBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref OptimizedImagesBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: s3:GetObject
            Resource: !Sub ${OptimizedImagesBucket.Arn}/*
            Principal:
              Service: cloudfront.amazonaws.com
            Condition:
              StringLike:
                AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution.Id}

  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName} # note: the /aws/lambda/ is mandatory as logstreams are automatically created by AWS in this LogGroup
      RetentionInDays: 7

  Lambda:
    Type: AWS::Lambda::Function
    DependsOn: LambdaLogGroup
    Properties:
      FunctionName: !Ref AWS::StackName
      Description: Image Optimizer
      Runtime: nodejs22.x
      Timeout: 30
      ReservedConcurrentExecutions: 100 # limit max concurrency to reduce the impact of denial of wallet attacks
      MemorySize: 3008 # the more memory the more CPU power, 3008 seems to be the sweet spot with two fast vCPU
      Handler: lambda.handler
      Code:
        ZipFile: 'placeholder - do not change'
        # An alternate way to deploy is to upload the lambda zip artifact to an S3 bucket
        # and reference the versioned artifact from the stack. Then set the version you want
        # to deploy and update a stack. Because stack updates always takes several seconds,
        # this is not the fastest way, but the safest way (auditable, rollback to older versions)
        # ---
        # S3Bucket: lambda-artifacts.example.com
        # S3Key: !Sub example/${Version}.zip

      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          NODE_ENV: 'production'
          NODE_OPTIONS: '--enable-source-maps'
          ORIGINAL_IMAGES_BUCKET: !Ref OriginalImagesBucket
          OPTIMIZED_IMAGES_BUCKET: !Ref OptimizedImagesBucket
          ORIGINAL_IMAGE_KEY: 'image/${ID}'
          IMAGE_PATH_ID_PATTERN: '^/image/(?<ID>[^/]+)/'
          IMAGE_QUALITY: '80'
          CACHE_CONTROL: 'public, max-age=31536000'
          SECURITY_TOKEN: !Ref SecurityToken
          # see https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/dynamic-references.html
          # SECURITY_TOKEN: resolve:secretsmanager:image-optimizer:SecretString:security-token -> parameter from AWS Secrets Manager (expensive, $0.4 per secret and month)
          # SECURITY_TOKEN: resolve:ssm-secure:image-optimizer-security-token -> AWS Systems Manager Parameter Store is cheaper, but not supported by lambda in December 2022

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref Lambda
      FunctionUrlAuthType: NONE
      Action: lambda:InvokeFunctionUrl
      Principal: '*'

  LambdaUrl:
    Type: AWS::Lambda::Url
    Properties:
      AuthType: NONE
      TargetFunctionArn: !Ref Lambda

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ImageAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub ${OriginalImagesBucket.Arn}/*
              - Effect: Allow
                Action:
                  - s3:ListObject
                Resource:
                  - !Sub ${OriginalImagesBucket.Arn}/*
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  - !Sub ${OptimizedImagesBucket.Arn}/*

  ViewerRequest:
    Type: AWS::CloudFront::Function
    Properties:
      Name: !Sub ${AWS::StackName}-viewer-request
      AutoPublish: true
      FunctionCode: !Ref ViewerRequestFunction
      FunctionConfig:
        Runtime: cloudfront-js-1.0
        Comment: verify and remove url signatures /sig=vgdRgasG

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Sub ${AWS::StackName}
        Enabled: true
        PriceClass: PriceClass_100
        HttpVersion: http2and3
        IPV6Enabled: true
        DefaultCacheBehavior:
          AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # Managed CachingOptimized Policy, see https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html#managed-cache-caching-optimized
          TargetOriginId: example-origin
          ViewerProtocolPolicy: redirect-to-https
        CacheBehaviors:
          - PathPattern: '/image/*'
            Compress: false
            AllowedMethods:
              - GET
              - HEAD
            CachedMethods:
              - GET
              - HEAD
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # Managed CachingOptimized Policy, see https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html#managed-cache-caching-optimized
            TargetOriginId: image-optimizer-group
            ViewerProtocolPolicy: redirect-to-https
            # FunctionAssociations: # WARNING: Uncomment this to enable URL signing as a protection against Denial-of-Wallet attack
            #   - EventType: viewer-request
            #     FunctionARN: !GetAtt ViewerRequest.FunctionARN

        Origins:
          - Id: optimized-images-bucket
            DomainName: !GetAtt OptimizedImagesBucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: '' # empty string because we use OriginAccessControl
            OriginAccessControlId: !GetAtt OriginAccessControl.Id
          - Id: image-optimizer-lambda
            DomainName: # parse DomainName from FunctionUrl which looks like 'https://12341232.lambda-url.on.aws/'
              !Select [2, !Split ['/', !Select [1, !Split [':', !GetAtt LambdaUrl.FunctionUrl]]]]
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
            OriginCustomHeaders:
              - HeaderName: x-security-token
                HeaderValue: !Ref SecurityToken
          - Id: example-origin
            DomainName: example.com
            CustomOriginConfig:
              OriginProtocolPolicy: https-only

        OriginGroups:
          Quantity: 1
          Items:
            - Id: image-optimizer-group
              FailoverCriteria:
                StatusCodes:
                  Quantity: 2
                  Items: [403, 404] # S3 will return 403 instead of 404 when s3:ListBucket permission is not given
              Members:
                Quantity: 2
                Items:
                  - OriginId: optimized-images-bucket
                  - OriginId: image-optimizer-lambda

  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub ${AWS::StackName}
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
